Composing Components
========================
Components can refer to other components in their output is called composing components.

Let us use some component abstraction for any level of details.


Project  structure
--------------------
myapp5
|
|------node-modules
|
|------public
|	|
|	|------favicon.ico
|	|------index.html 
|	|------manifest.json
|
|------src
	|
	|------index.js
	|------Student.js 
|	|------App.js
|
|------package.json
|------README.md

step1:
------
	Develop React Application.
	ex:
	E:/BUI-2pm/ReactProjects>create-react-app  myapp5

step2:
------
	Delete all starting 6 files from src folder.

step3:
------
	create a "Student.js" file in "src " folder.
	
Student.js
---------
function Student()
{
    return <h1>This is Student Component</h1>
}
export default Student;



step4:
-----
	create a App.js file for composing Student component.
App.js
--------
import Student from "./Student";

function App()
{
  return <>
          <Student/>
          <Student/>
          </>
}
export default App;


step:5
--------
	create "index.js" file to render the output to index.html file.

index.js
---------

import App from './App';
import ReactDOM from 'react-dom/client';
import React from 'react';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
     )


step6:
-----
	move to myapp5
	ex:
		E:/BUI-2pm/ReactProjects> cd myapp5

step7:
-----
	Run the application.
	ex:
		DE:/BUI-2pm/ReactProjects/myapp5>npm start

step8:
-------
	Test the React Application.
	ex:
		http://localhost:3000

Note:
------
	Internal Execution of Above program
	ex:
		Student.js --> App.js--->index.js--->index.html




composing components using props object
========================================
 
Student.js
----------
function Student(props)
{
    return <h1>Name : {props.name}</h1>
}
export default Student;


App.js
------
import Student from "./Student";

function App()
{
  return <>
          <Student name="Alan"/>
          <Student name="Morries"/>
          </>
}
export default App;


index.js
-------

import App from './App';
import ReactDOM from 'react-dom/client';
import React from 'react';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
)




Note:
----
	Internal execution of above program 
ex:
	Student(Alan)
			----> App.js  ---> index.js ---> index.html 
	Student(Morries)     
 

React CSS
==============
CSS in React is used to style the React App or Component.

There are four ways available to add styling to your React App or Component with CSS.

1) Inline Styling
2) CSS Stylesheet
3) CSS Module
4) Styled Components

1)Inline CSS
===============
Inline CSS represent by "style" attribute in React application.

The inline styles are specified with a JavaScript object in camelCase version of the style name.

ex:

App.js
----------
import Student from "./Student";

function App()
{
  return <>
         <h1 style={{color:"green"}}>React Inline CSS</h1>
         <h1 style={{backgroundColor:"yellow"}}>React Inline CSS</h1>
          </>
}
export default App;


The inline styling also allows us to create an object with styling information and 
refer it in the style attribute.

App.js
---------
import Student from "./Student";

function App()
{
  const mystyle = {
    color: "white",
    backgroundColor: "DodgerBlue",
    padding: "10px",
    fontFamily: "Arial"
  };
  return <>
         <h1 style={mystyle}>React Inline CSS</h1>
         <h1 style={{backgroundColor:"yellow"}}>React Inline CSS</h1>
          </>
}
export default App;



2) CSS Stylesheet
===================
We can write styling in a separate file for your React application, and save the file with a .css extension. 

Later we can import .css file in our required application.

ex:1
----------

App.js
--------
import Student from "./Student";
import './App.css';
function App()
{
  
  return <>
         <h1>React CSS styles</h1>
         <h1>React CSS styles</h1>
          </>
}
export default App;


App.css
------------
body{
  background-color: yellow;
}
h1
{
  color:blue;
}



ex:2
----------

App.js
--------
import Student from "./Student";
import './App.css';
function App()
{
  
  return <>
         <h1 id="myId">React CSS styles</h1>
         <h1 className="myClass">React CSS styles</h1>
          </>
}
export default App;

App.css
---------
body{
  background-color: yellow;
}
#myId
{
  color:blue;
}
.myClass
{
  color:red;
}


3. CSS Module
====================
CSS Module is another way of adding styles to your application. 

It is a CSS file where all class names and animation names are scoped locally by default. 

It is available only for the component which imports it, means any styling you add can never be applied to other components without your permission, and you never need to worry about name conflicts.

We can create CSS Module with the .module.css extension like a myStyles.module.css.

ex:
---------

App.js
--------
import Student from "./Student";
import styles from './mystyles.module.css';
function App()
{
  
  return <>
         <h1  className={styles.mystyle}>React CSS styles</h1>
         <h1 className={styles.parastyle}>React CSS styles</h1>
          </>
}
export default App;

mystyles.module.css
-----------------------
.mystyle {  
    background-color: #cdc0b0;  
    color: Red;  
    padding: 10px;  
    font-family: Arial;  
    text-align: center;  
  }  
    
  .parastyle{  
    color: Green;  
    font-family: Arial;  
    font-size: 35px;  
    text-align: center;  
  }  


4. Styled Components
=======================
Styled-components is a library for React.

It uses enhance CSS for styling React component systems in your application, which is written with a mixture of JavaScript and CSS.

The styled-components library takes a single command to install in your React application. 

ex:
		cmd/myapp6> npm install styled-components --save  

we create a variable by selecting a particular HTML element such as <div>, <Title>, and <paragraph> where we store our style attributes.


App.js
----------
import Student from "./Student";
import styled from 'styled-components';  
function App()
{
  
  const Div = styled.div`  
            margin: 20px;  
            border: 5px dashed green;  
            &:hover {  
            background-color: ${(props) => props.hoverColor};  
            }  
            `;  
    const Title = styled.h1`  
            font-family: Arial;  
            font-size: 35px;  
            text-align: center;  
            color: palevioletred;  
            `;  
    const Paragraph = styled.p`  
            font-size: 25px;  
            text-align: center;  
            background-Color: lightgreen;  
            `;  
  return <>
         <Title>Styled Components Example</Title>  
            <p></p>  
            <Div hoverColor="Orange">  
                 <Paragraph>Hello JavaTpoint!!</Paragraph>  
            </Div>  
          </>
}
export default App;


or





React Props
============
When React sees an Element representing a userdefined component,It passes
JSX attributes to this component as a single object.We call this object as "props".


Project  structure
--------------------
myapp6
|
|------node-modules
|
|------public
|	|
|	|------favicon.ico
|	|------index.html 
|	|------manifest.json
|
|------src
	|
	|------index.js
	|------App.js
|	
|
|------package.json
|------README.md

step1:
------
	Develop React Application.
	ex:
	D:/FirstReact>create-react-app  myapp6

step2:
------
	Delete all the files from src folder.

step3:
------
	create a "App.js" file in "src " folder.
	
App.js
---------
import Student from "./Student";
function App(props)
{
  return <>
            <h1>Name : {props.name}</h1>
            <h1>RollNo : {props.rollno}</h1>
          </>
}
export default App;
export default Student;


step4:
------

	create "index.js" file to render the output to index.html file.

index.js
---------
import App from './App';
import ReactDOM from 'react-dom/client';
import React from 'react';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App name="Alan" rollno="101"/>
      </React.StrictMode>
    
)

step5:
-----
	move to myapp6
	ex:
		D:/FirstReact> cd myapp6

step6:
-----
	Run the application.
	ex:
		D:/FirstReact/myapp6>npm start

step7:
-------
	Test the React Application.
	ex:
		http://localhost:3000



Note:

internal representation of props 
-----------------------------------
props ={
		name: "Alan",
		roll:  111
	}



ex:2
-----

App.js
--------
import Student from "./Student";
import styled from 'styled-components';  
function App(props)
{
  return <>
            <h1>Name : {props.name}</h1>
            <h1>RollNo : {props.rollno}</h1>
          </>
}
export default App;

index.js
-------
import App from './App';
import ReactDOM from 'react-dom/client';
import React from 'react';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App name={"Alan"} rollno={100+1}/>
      </React.StrictMode>
    
)




























































