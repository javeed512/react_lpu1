Hooks
==========
Hooks allow us to "hook" into React features such as state and lifecycle methods.

Hooks allow function components to have access to state , lifecycle methods and other React features.

Hooks allow us to use React without classes.It means you can use state and other React features without writing a class.

React provides a few built-In hooks like useState,useEffect and etc.

Hooks are new addition in React 16.8.

When use Hooks
---------------
If you write a function component and realize you need to add some state to it.


Rules of Hooks
==================

There are 3 rules for hooks:

1)Hooks can only be called inside React function components.

2)Hooks can only be called at the top level of a component.

3)Hooks cannot be conditional

Note: Hooks will not work in React class components.



Declaring State
================
A useState() is a Hook that allows us to add React state to function components.

We call it inside a function component to add some local state to it.

A useState() returns a pair - the current state value and a function that let us update it.

React will preserve this state between re-renders.

We can call this function from an event handler or somewhere else.

ex:
import React ,{useState} from "react";
useState("Alan");
or
const nameStateVariable=useState("Alan");
or
const [name,setName]=useState("Alan"); // it is destructure the array.

When we declare a state variable with useState, it returns a pair-an array with two items.So by writing square bracket we are doing array Destructuring.

ex:

we can use below code as follow.

const nameStateVariable = useState("Alan");

const name=nameStateVariable[0];  //first item of array
const setName=nameStateVariable[1]; // second item of array

>The first item is the current value.
>The second is a function that lets us update it.

Note:
-----
	Instead of doing  above code ,better to perform Destructuring.

ex:
	function App()
	{

	const [name,setName] = useState("Rahul");
	}

ex1
----

App.js
--------
import { useState } from "react";
function App()
{
    const nameStateArray=useState("Alan");

    return (
        <div>
            <h1>Name : {nameStateArray[0]}</h1>
        </div>
    )
}
export default App;

index.js
----------

import Student from './Student';
import ReactDOM from 'react-dom/client';
import React from 'react';
import App from './App';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
)

To change the state we can use below example.

ex:2
-------
App.js
-------
import { useState } from "react";
function App()
{
    const nameStateArray=useState("Alan");

    const handleClick=()=>
    {
           nameStateArray[1]("Kelvin"); 
    }
    return (
        <div>
            <h1>Name : {nameStateArray[0]}</h1>
            <button onClick={handleClick}>clickMe</button>
        </div>
    )
}
export default App;

index.js
---------
import Student from './Student';
import ReactDOM from 'react-dom/client';
import React from 'react';
import App from './App';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
)




ex:3
----

App.js
------
import { useState } from "react";
function App()
{
    const nameStateVariable=useState("Alan");
    const name=nameStateVariable[0];
    const setName=nameStateVariable[1];

    const handleClick=()=>
    {
           setName("Kelvin"); 
    }
    return (
        <div>
            <h1>Name : {name}</h1>
            <button onClick={handleClick}>clickMe</button>
        </div>
    )
}
export default App;

index.js
----------

import Student from './Student';
import ReactDOM from 'react-dom/client';
import React from 'react';
import App from './App';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
)







ex:4 (Destructuring of an Array)
------------------------------------

App.js
------
import { useState } from "react";
function App()
{
    const [name,setName]=useState("Alan");

    const handleClick=()=>
    {
           setName("Kelvin"); 
    }
    return (
        <div>
            <h1>Name : {name}</h1>
            <button onClick={handleClick}>clickMe</button>
        </div>
    )
}
export default App;


index.js
-----------
import Student from './Student';
import ReactDOM from 'react-dom/client';
import React from 'react';
import App from './App';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
)





Effect Hooks
============
The Effect Hook let us to perform side effects in function components.

Data fetching , setting up a subscription, and manually changing the 
DOM in React components are all examples of side effects.

useEffect()
===========
A useEffect is a hook for encapsulating code that has "side effect 
if we are familier with React class life cycle methods.We can thing of 
useEffect Hooks as componentDidMount,compnoentDidUpdate and 
componentWillUnmount combined.

useEffect =componentDidMount+ componentDidUpdate +componentWillUnmount
ex:
import React,{useEffect} from "react";
useEffect(Function)
or
useEffect(Function ,Array)

The function passes to useEffect will run after the render is committed
to the screen.

Second argument to useEffect that is the array of values that the 
effect depends on.(It is for condition purpose).

Note:
------
We can call useEffect as many times we required.

ex:
useEffect(()=>
{
	console.log("Hello useeffect");
});

ex:
useEffect(()=>
{	
	console.log("Hello useEffect");
},[count]);


What does useEffect do?
--------------------------
By using this Hook,we can tell react that your component needs to do 
something after render.

React remember the function we passed and call it later after performing 
the DOM updates.

In this effect, we set the document title,we could also perform data 
fetching or call some other imperative API.

Note:
--------
useEffect runs after the first render and after every update.

ex:

App.js
------
import { useState, useEffect } from "react";
function App()
{
    const [count,setCount]=useState(0);

    const handleClick=()=>
    {
           setCount(count+1); 
    }

    useEffect(() => {  
        // Update the document title using the browser API  
        document.title = `You clicked ${count} times`;  
      });  
    return (
        <div>
            <h1>You clicked  {count} Times</h1>
            <button onClick={handleClick}>clickMe</button>
        </div>
    )
}
export default App;

index.js
----------

import Student from './Student';
import ReactDOM from 'react-dom/client';
import React from 'react';
import App from './App';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
)


React createContext Hook (Context API)
======================================
Context provides a way to pass data through the component tree without 
having to pass props down manually at several level.

To do this without Context, we will need to pass the state(useState) as "props" through each nested component. This is called "prop drilling".

Diagram:  react9.1

Project  structure
--------------------
myapp12
|
|------node-modules
|
|------public
|	|
|	|------favicon.ico
|	|------index.html 
|	|------manifest.json
|
|------src
	|
	|------index.js
	|------App.js 
	|------Acomponent.js 
	|------Bcomponent.js
	|------Ccomponent.js
|
|------package.json
|------README.md


App.js
------------
import React from 'react';
import Acomponent from "./Acomponent";
export const UserContext=React.createContext();
function App()
{
    	
    return (
        <div>
            <UserContext.Provider value={'IHUB'}>
            <Acomponent/>
            </UserContext.Provider>
           
        </div>
    )
}
export default App;

Acomponent.js
---------------
import Bcomponent from "./Bcomponent";

function Acomponent()
{
    return (
        <Bcomponent/>
    )
}
export default  Acomponent;


Bcomponent.js
----------------
import Ccomponent from "./Ccomponent";

function Bcomponent()
{
    return (
       <Ccomponent/>
    )
}
export default  Bcomponent;


Ccomponent.js
--------------
import {UserContext} from "./App";

function Ccomponent()
{
    return (
    <div>
     <UserContext.Consumer>
         {
             user => {
                 return <div>The value is : {user} </div>
             }
         }
     </UserContext.Consumer>
    </div>
    )
}
export default  Ccomponent;



index.js
-----------
import Student from './Student';
import ReactDOM from 'react-dom/client';
import React from 'react';
import App from './App';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
)


React useReducer Hook
========================
The useReducer() Hook is similar to the useState() Hook.

It allows for custom state logic.

The useReducer Hook accepts two arguments.
ex:

	useReducer(<reducer>, <initialState>)

The useReducer Hook returns the current state and a dispatch method.
ex:
	const [state,dispatch]= useReducer(reducer,initialState);


App.js
----------
import {useReducer} from 'react';

const initialState=0;
const reducer=(state,action)=>
{
    switch(action)
    {
        case 'increment': return state+1;
        case 'decrement': return state-1;
        case 'reset': return initialState;
        default: return state;
    }
}
function App()
{
 const [count,dispatch]=useReducer(reducer,initialState);
    
    return (
        <div>
            <h1>Count : {count}</h1>
            <button onClick={()=>dispatch('increment')}>Increment</button>
            <button onClick={()=>dispatch('decrement')}>Decrement</button>
            <button onClick={()=>dispatch('reset')}>Reset</button>
           
        </div>
    )
}
export default App;


index.js
-----------

import Student from './Student';
import ReactDOM from 'react-dom/client';
import React from 'react';
import App from './App';

const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(
      <React.StrictMode>
             <App />
      </React.StrictMode>
)








